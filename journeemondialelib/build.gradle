apply plugin: 'com.android.library'
apply plugin: 'realm-android'
apply plugin: 'me.tatarka.retrolambda'

def analytics = hasProperty('analytics') ? key : "UA-XXXX-Y"

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError false
    }

    signingConfigs {
        release {

        }
    }

    buildTypes {
        release {
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField 'String', 'ANALYTICS_TOKEN', analytics
        }

        debug {
            signingConfig signingConfigs.release
            buildConfigField 'String', 'ANALYTICS_TOKEN', '"UA-XXXX-Y"'
        }
    }
}

dependencies {
    compile 'joda-time:joda-time:2.9.9'
    compile 'com.google.android.gms:play-services-analytics:10.0.1'
    compile 'com.google.android.gms:play-services-wearable:10.0.1'
    compile "android.arch.lifecycle:runtime:1.0.0-alpha1"
    compile "android.arch.lifecycle:extensions:1.0.0-alpha1"
    annotationProcessor "android.arch.lifecycle:compiler:1.0.0-alpha1"
}

apply plugin: 'net.ltgt.errorprone'

configurations.errorprone {
    resolutionStrategy.force 'com.google.errorprone:error_prone_core:' + rootProject.ext.error_prone
}

apply plugin: 'checkstyle'

task checkstyle(type: Checkstyle) {
    ignoreFailures true

    checkstyle { toolVersion = rootProject.ext.checkstyle }

    configFile rootProject.file("check/checkstyle.xml")
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    classpath = files()
}

check.dependsOn('checkstyle')

apply plugin: 'pmd'

task pmd(type: Pmd) {
    ignoreFailures = true

    pmd { toolVersion = rootProject.ext.pmd }

    ruleSetFiles = rootProject.files("check/pmd.xml")

    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        xml.enabled = false
        html.enabled = true
    }
}

apply plugin: 'findbugs'

task findbugs(type: FindBugs) {
    ignoreFailures = true

    findbugs { toolVersion = rootProject.ext.findbugs }

    effort = "max"
    reportLevel = "high"

    excludeFilter = rootProject.file("check/findbugs-exclude.xml")
    classes = files("$project.buildDir/intermediates/classes/")

    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        xml {
            destination "$project.buildDir/reports/findbugs/findbugs.xml"
            xml.withMessages true
        }
    }

    classpath = files()
}